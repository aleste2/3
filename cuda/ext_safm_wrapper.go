package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for addAFMexchange kernel
var addAFMexchange_code cu.Function

// Stores the arguments for addAFMexchange kernel invocation
type addAFMexchange_args_t struct {
	arg_Bx      unsafe.Pointer
	arg_By      unsafe.Pointer
	arg_Bz      unsafe.Pointer
	arg_mx      unsafe.Pointer
	arg_my      unsafe.Pointer
	arg_mz      unsafe.Pointer
	arg_AFMex   float32
	arg_AFMR1   int
	arg_AFMR2   int
	arg_tsp     float32
	arg_Ms_     unsafe.Pointer
	arg_Ms_mul  float32
	arg_regions unsafe.Pointer
	arg_wx      float32
	arg_wy      float32
	arg_wz      float32
	arg_Nx      int
	arg_Ny      int
	arg_Nz      int
	arg_PBC     byte
	argptr      [20]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for addAFMexchange kernel invocation
var addAFMexchange_args addAFMexchange_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	addAFMexchange_args.argptr[0] = unsafe.Pointer(&addAFMexchange_args.arg_Bx)
	addAFMexchange_args.argptr[1] = unsafe.Pointer(&addAFMexchange_args.arg_By)
	addAFMexchange_args.argptr[2] = unsafe.Pointer(&addAFMexchange_args.arg_Bz)
	addAFMexchange_args.argptr[3] = unsafe.Pointer(&addAFMexchange_args.arg_mx)
	addAFMexchange_args.argptr[4] = unsafe.Pointer(&addAFMexchange_args.arg_my)
	addAFMexchange_args.argptr[5] = unsafe.Pointer(&addAFMexchange_args.arg_mz)
	addAFMexchange_args.argptr[6] = unsafe.Pointer(&addAFMexchange_args.arg_AFMex)
	addAFMexchange_args.argptr[7] = unsafe.Pointer(&addAFMexchange_args.arg_AFMR1)
	addAFMexchange_args.argptr[8] = unsafe.Pointer(&addAFMexchange_args.arg_AFMR2)
	addAFMexchange_args.argptr[9] = unsafe.Pointer(&addAFMexchange_args.arg_tsp)
	addAFMexchange_args.argptr[10] = unsafe.Pointer(&addAFMexchange_args.arg_Ms_)
	addAFMexchange_args.argptr[11] = unsafe.Pointer(&addAFMexchange_args.arg_Ms_mul)
	addAFMexchange_args.argptr[12] = unsafe.Pointer(&addAFMexchange_args.arg_regions)
	addAFMexchange_args.argptr[13] = unsafe.Pointer(&addAFMexchange_args.arg_wx)
	addAFMexchange_args.argptr[14] = unsafe.Pointer(&addAFMexchange_args.arg_wy)
	addAFMexchange_args.argptr[15] = unsafe.Pointer(&addAFMexchange_args.arg_wz)
	addAFMexchange_args.argptr[16] = unsafe.Pointer(&addAFMexchange_args.arg_Nx)
	addAFMexchange_args.argptr[17] = unsafe.Pointer(&addAFMexchange_args.arg_Ny)
	addAFMexchange_args.argptr[18] = unsafe.Pointer(&addAFMexchange_args.arg_Nz)
	addAFMexchange_args.argptr[19] = unsafe.Pointer(&addAFMexchange_args.arg_PBC)
}

// Wrapper for addAFMexchange CUDA kernel, asynchronous.
func k_addAFMexchange_async(Bx unsafe.Pointer, By unsafe.Pointer, Bz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, AFMex float32, AFMR1 int, AFMR2 int, tsp float32, Ms_ unsafe.Pointer, Ms_mul float32, regions unsafe.Pointer, wx float32, wy float32, wz float32, Nx int, Ny int, Nz int, PBC byte, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("addAFMexchange")
	}

	addAFMexchange_args.Lock()
	defer addAFMexchange_args.Unlock()

	if addAFMexchange_code == 0 {
		addAFMexchange_code = fatbinLoad(addAFMexchange_map, "addAFMexchange")
	}

	addAFMexchange_args.arg_Bx = Bx
	addAFMexchange_args.arg_By = By
	addAFMexchange_args.arg_Bz = Bz
	addAFMexchange_args.arg_mx = mx
	addAFMexchange_args.arg_my = my
	addAFMexchange_args.arg_mz = mz
	addAFMexchange_args.arg_AFMex = AFMex
	addAFMexchange_args.arg_AFMR1 = AFMR1
	addAFMexchange_args.arg_AFMR2 = AFMR2
	addAFMexchange_args.arg_tsp = tsp
	addAFMexchange_args.arg_Ms_ = Ms_
	addAFMexchange_args.arg_Ms_mul = Ms_mul
	addAFMexchange_args.arg_regions = regions
	addAFMexchange_args.arg_wx = wx
	addAFMexchange_args.arg_wy = wy
	addAFMexchange_args.arg_wz = wz
	addAFMexchange_args.arg_Nx = Nx
	addAFMexchange_args.arg_Ny = Ny
	addAFMexchange_args.arg_Nz = Nz
	addAFMexchange_args.arg_PBC = PBC

	args := addAFMexchange_args.argptr[:]
	cu.LaunchKernel(addAFMexchange_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("addAFMexchange")
	}
}

// maps compute capability on PTX code for addAFMexchange kernel.
var addAFMexchange_map = map[int]string{0: "",
	70: addAFMexchange_ptx_70}

// addAFMexchange PTX code for various compute capabilities.
const (
	addAFMexchange_ptx_70 = `
.version 7.2
.target sm_70
.address_size 64

	// .globl	addAFMexchange

.visible .entry addAFMexchange(
	.param .u64 addAFMexchange_param_0,
	.param .u64 addAFMexchange_param_1,
	.param .u64 addAFMexchange_param_2,
	.param .u64 addAFMexchange_param_3,
	.param .u64 addAFMexchange_param_4,
	.param .u64 addAFMexchange_param_5,
	.param .f32 addAFMexchange_param_6,
	.param .u32 addAFMexchange_param_7,
	.param .u32 addAFMexchange_param_8,
	.param .f32 addAFMexchange_param_9,
	.param .u64 addAFMexchange_param_10,
	.param .f32 addAFMexchange_param_11,
	.param .u64 addAFMexchange_param_12,
	.param .f32 addAFMexchange_param_13,
	.param .f32 addAFMexchange_param_14,
	.param .f32 addAFMexchange_param_15,
	.param .u32 addAFMexchange_param_16,
	.param .u32 addAFMexchange_param_17,
	.param .u32 addAFMexchange_param_18,
	.param .u8 addAFMexchange_param_19
)
{
	.reg .pred 	%p<12>;
	.reg .f32 	%f<63>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<32>;


	ld.param.u64 	%rd7, [addAFMexchange_param_0];
	ld.param.u64 	%rd8, [addAFMexchange_param_1];
	ld.param.u64 	%rd9, [addAFMexchange_param_2];
	ld.param.u64 	%rd11, [addAFMexchange_param_3];
	ld.param.u64 	%rd12, [addAFMexchange_param_4];
	ld.param.u64 	%rd13, [addAFMexchange_param_5];
	ld.param.f32 	%f24, [addAFMexchange_param_6];
	ld.param.u32 	%r5, [addAFMexchange_param_7];
	ld.param.u32 	%r6, [addAFMexchange_param_8];
	ld.param.f32 	%f25, [addAFMexchange_param_9];
	ld.param.u64 	%rd10, [addAFMexchange_param_10];
	ld.param.f32 	%f56, [addAFMexchange_param_11];
	ld.param.u32 	%r7, [addAFMexchange_param_16];
	ld.param.u32 	%r8, [addAFMexchange_param_17];
	ld.param.u32 	%r9, [addAFMexchange_param_18];
	cvta.to.global.u64 	%rd1, %rd13;
	cvta.to.global.u64 	%rd2, %rd12;
	cvta.to.global.u64 	%rd3, %rd11;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r1, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %tid.y;
	mad.lo.s32 	%r2, %r14, %r13, %r15;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %ctaid.z;
	mov.u32 	%r18, %tid.z;
	mad.lo.s32 	%r3, %r17, %r16, %r18;
	setp.ge.s32 	%p1, %r1, %r7;
	setp.ge.s32 	%p2, %r2, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	LBB0_9;

	cvta.to.global.u64 	%rd14, %rd7;
	mad.lo.s32 	%r19, %r3, %r8, %r2;
	mad.lo.s32 	%r4, %r19, %r7, %r1;
	mul.wide.s32 	%rd15, %r4, 4;
	add.s64 	%rd16, %rd3, %rd15;
	add.s64 	%rd17, %rd2, %rd15;
	add.s64 	%rd18, %rd1, %rd15;
	ld.global.nc.f32 	%f1, [%rd16];
	ld.global.nc.f32 	%f2, [%rd17];
	ld.global.nc.f32 	%f3, [%rd18];
	add.s64 	%rd4, %rd14, %rd15;
	ld.global.f32 	%f60, [%rd4];
	cvta.to.global.u64 	%rd19, %rd8;
	add.s64 	%rd5, %rd19, %rd15;
	ld.global.f32 	%f61, [%rd5];
	cvta.to.global.u64 	%rd20, %rd9;
	add.s64 	%rd6, %rd20, %rd15;
	ld.global.f32 	%f62, [%rd6];
	setp.eq.s64 	%p6, %rd10, 0;
	@%p6 bra 	LBB0_3;

	cvta.to.global.u64 	%rd21, %rd10;
	add.s64 	%rd23, %rd21, %rd15;
	ld.global.nc.f32 	%f27, [%rd23];
	mul.f32 	%f56, %f27, %f56;

LBB0_3:
	setp.eq.f32 	%p7, %f24, 0f00000000;
	@%p7 bra 	LBB0_8;

	setp.ne.s32 	%p8, %r3, %r5;
	@%p8 bra 	LBB0_6;

	mad.lo.s32 	%r20, %r8, %r6, %r2;
	mad.lo.s32 	%r21, %r20, %r7, %r1;
	mul.wide.s32 	%rd24, %r21, 4;
	add.s64 	%rd25, %rd3, %rd24;
	add.s64 	%rd26, %rd2, %rd24;
	add.s64 	%rd27, %rd1, %rd24;
	ld.global.nc.f32 	%f28, [%rd27];
	ld.global.nc.f32 	%f29, [%rd25];
	ld.global.nc.f32 	%f30, [%rd26];
	mul.f32 	%f31, %f30, %f30;
	fma.rn.f32 	%f32, %f29, %f29, %f31;
	fma.rn.f32 	%f33, %f28, %f28, %f32;
	setp.eq.f32 	%p9, %f33, 0f00000000;
	selp.f32 	%f34, %f3, %f28, %p9;
	selp.f32 	%f35, %f2, %f30, %p9;
	selp.f32 	%f36, %f1, %f29, %p9;
	div.rn.f32 	%f37, %f24, %f56;
	div.rn.f32 	%f38, %f37, %f25;
	sub.f32 	%f39, %f36, %f1;
	sub.f32 	%f40, %f35, %f2;
	sub.f32 	%f41, %f34, %f3;
	fma.rn.f32 	%f60, %f38, %f39, %f60;
	fma.rn.f32 	%f61, %f38, %f40, %f61;
	fma.rn.f32 	%f62, %f38, %f41, %f62;

LBB0_6:
	setp.ne.s32 	%p10, %r3, %r6;
	@%p10 bra 	LBB0_8;

	mad.lo.s32 	%r22, %r8, %r5, %r2;
	mad.lo.s32 	%r23, %r22, %r7, %r1;
	mul.wide.s32 	%rd28, %r23, 4;
	add.s64 	%rd29, %rd3, %rd28;
	add.s64 	%rd30, %rd2, %rd28;
	add.s64 	%rd31, %rd1, %rd28;
	ld.global.nc.f32 	%f42, [%rd31];
	ld.global.nc.f32 	%f43, [%rd29];
	ld.global.nc.f32 	%f44, [%rd30];
	mul.f32 	%f45, %f44, %f44;
	fma.rn.f32 	%f46, %f43, %f43, %f45;
	fma.rn.f32 	%f47, %f42, %f42, %f46;
	setp.eq.f32 	%p11, %f47, 0f00000000;
	selp.f32 	%f48, %f3, %f42, %p11;
	selp.f32 	%f49, %f2, %f44, %p11;
	selp.f32 	%f50, %f1, %f43, %p11;
	div.rn.f32 	%f51, %f24, %f56;
	div.rn.f32 	%f52, %f51, %f25;
	sub.f32 	%f53, %f50, %f1;
	sub.f32 	%f54, %f49, %f2;
	sub.f32 	%f55, %f48, %f3;
	fma.rn.f32 	%f60, %f52, %f53, %f60;
	fma.rn.f32 	%f61, %f52, %f54, %f61;
	fma.rn.f32 	%f62, %f52, %f55, %f62;

LBB0_8:
	st.global.f32 	[%rd4], %f60;
	st.global.f32 	[%rd5], %f61;
	st.global.f32 	[%rd6], %f62;

LBB0_9:
	ret;

}

`
)
