package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for addAFMexchange kernel
var addAFMexchange_code cu.Function

// Stores the arguments for addAFMexchange kernel invocation
type addAFMexchange_args_t struct {
	arg_Bx      unsafe.Pointer
	arg_By      unsafe.Pointer
	arg_Bz      unsafe.Pointer
	arg_mx      unsafe.Pointer
	arg_my      unsafe.Pointer
	arg_mz      unsafe.Pointer
	arg_AFMex   float32
	arg_AFMR1   int
	arg_AFMR2   int
	arg_tsp     float32
	arg_Ms_     unsafe.Pointer
	arg_Ms_mul  float32
	arg_regions unsafe.Pointer
	arg_wx      float32
	arg_wy      float32
	arg_wz      float32
	arg_Nx      int
	arg_Ny      int
	arg_Nz      int
	arg_PBC     byte
	argptr      [20]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for addAFMexchange kernel invocation
var addAFMexchange_args addAFMexchange_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	addAFMexchange_args.argptr[0] = unsafe.Pointer(&addAFMexchange_args.arg_Bx)
	addAFMexchange_args.argptr[1] = unsafe.Pointer(&addAFMexchange_args.arg_By)
	addAFMexchange_args.argptr[2] = unsafe.Pointer(&addAFMexchange_args.arg_Bz)
	addAFMexchange_args.argptr[3] = unsafe.Pointer(&addAFMexchange_args.arg_mx)
	addAFMexchange_args.argptr[4] = unsafe.Pointer(&addAFMexchange_args.arg_my)
	addAFMexchange_args.argptr[5] = unsafe.Pointer(&addAFMexchange_args.arg_mz)
	addAFMexchange_args.argptr[6] = unsafe.Pointer(&addAFMexchange_args.arg_AFMex)
	addAFMexchange_args.argptr[7] = unsafe.Pointer(&addAFMexchange_args.arg_AFMR1)
	addAFMexchange_args.argptr[8] = unsafe.Pointer(&addAFMexchange_args.arg_AFMR2)
	addAFMexchange_args.argptr[9] = unsafe.Pointer(&addAFMexchange_args.arg_tsp)
	addAFMexchange_args.argptr[10] = unsafe.Pointer(&addAFMexchange_args.arg_Ms_)
	addAFMexchange_args.argptr[11] = unsafe.Pointer(&addAFMexchange_args.arg_Ms_mul)
	addAFMexchange_args.argptr[12] = unsafe.Pointer(&addAFMexchange_args.arg_regions)
	addAFMexchange_args.argptr[13] = unsafe.Pointer(&addAFMexchange_args.arg_wx)
	addAFMexchange_args.argptr[14] = unsafe.Pointer(&addAFMexchange_args.arg_wy)
	addAFMexchange_args.argptr[15] = unsafe.Pointer(&addAFMexchange_args.arg_wz)
	addAFMexchange_args.argptr[16] = unsafe.Pointer(&addAFMexchange_args.arg_Nx)
	addAFMexchange_args.argptr[17] = unsafe.Pointer(&addAFMexchange_args.arg_Ny)
	addAFMexchange_args.argptr[18] = unsafe.Pointer(&addAFMexchange_args.arg_Nz)
	addAFMexchange_args.argptr[19] = unsafe.Pointer(&addAFMexchange_args.arg_PBC)
}

// Wrapper for addAFMexchange CUDA kernel, asynchronous.
func k_addAFMexchange_async(Bx unsafe.Pointer, By unsafe.Pointer, Bz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, AFMex float32, AFMR1 int, AFMR2 int, tsp float32, Ms_ unsafe.Pointer, Ms_mul float32, regions unsafe.Pointer, wx float32, wy float32, wz float32, Nx int, Ny int, Nz int, PBC byte, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("addAFMexchange")
	}

	addAFMexchange_args.Lock()
	defer addAFMexchange_args.Unlock()

	if addAFMexchange_code == 0 {
		addAFMexchange_code = fatbinLoad(addAFMexchange_map, "addAFMexchange")
	}

	addAFMexchange_args.arg_Bx = Bx
	addAFMexchange_args.arg_By = By
	addAFMexchange_args.arg_Bz = Bz
	addAFMexchange_args.arg_mx = mx
	addAFMexchange_args.arg_my = my
	addAFMexchange_args.arg_mz = mz
	addAFMexchange_args.arg_AFMex = AFMex
	addAFMexchange_args.arg_AFMR1 = AFMR1
	addAFMexchange_args.arg_AFMR2 = AFMR2
	addAFMexchange_args.arg_tsp = tsp
	addAFMexchange_args.arg_Ms_ = Ms_
	addAFMexchange_args.arg_Ms_mul = Ms_mul
	addAFMexchange_args.arg_regions = regions
	addAFMexchange_args.arg_wx = wx
	addAFMexchange_args.arg_wy = wy
	addAFMexchange_args.arg_wz = wz
	addAFMexchange_args.arg_Nx = Nx
	addAFMexchange_args.arg_Ny = Ny
	addAFMexchange_args.arg_Nz = Nz
	addAFMexchange_args.arg_PBC = PBC

	args := addAFMexchange_args.argptr[:]
	cu.LaunchKernel(addAFMexchange_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("addAFMexchange")
	}
}

// maps compute capability on PTX code for addAFMexchange kernel.
var addAFMexchange_map = map[int]string{0: "",
	30: addAFMexchange_ptx_30}

// addAFMexchange PTX code for various compute capabilities.
const (
	addAFMexchange_ptx_30 = `
.version 6.5
.target sm_30
.address_size 64

	// .globl	addAFMexchange

.visible .entry addAFMexchange(
	.param .u64 addAFMexchange_param_0,
	.param .u64 addAFMexchange_param_1,
	.param .u64 addAFMexchange_param_2,
	.param .u64 addAFMexchange_param_3,
	.param .u64 addAFMexchange_param_4,
	.param .u64 addAFMexchange_param_5,
	.param .f32 addAFMexchange_param_6,
	.param .u32 addAFMexchange_param_7,
	.param .u32 addAFMexchange_param_8,
	.param .f32 addAFMexchange_param_9,
	.param .u64 addAFMexchange_param_10,
	.param .f32 addAFMexchange_param_11,
	.param .u64 addAFMexchange_param_12,
	.param .f32 addAFMexchange_param_13,
	.param .f32 addAFMexchange_param_14,
	.param .f32 addAFMexchange_param_15,
	.param .u32 addAFMexchange_param_16,
	.param .u32 addAFMexchange_param_17,
	.param .u32 addAFMexchange_param_18,
	.param .u8 addAFMexchange_param_19
)
{
	.reg .pred 	%p<12>;
	.reg .f32 	%f<60>;
	.reg .b32 	%r<76>;
	.reg .b64 	%rd<45>;


	ld.param.u64 	%rd1, [addAFMexchange_param_0];
	ld.param.u64 	%rd2, [addAFMexchange_param_1];
	ld.param.u64 	%rd3, [addAFMexchange_param_2];
	ld.param.u64 	%rd4, [addAFMexchange_param_3];
	ld.param.u64 	%rd5, [addAFMexchange_param_4];
	ld.param.u64 	%rd6, [addAFMexchange_param_5];
	ld.param.f32 	%f21, [addAFMexchange_param_6];
	ld.param.u32 	%r4, [addAFMexchange_param_7];
	ld.param.u32 	%r5, [addAFMexchange_param_8];
	ld.param.f32 	%f22, [addAFMexchange_param_9];
	ld.param.u64 	%rd7, [addAFMexchange_param_10];
	ld.param.f32 	%f8, [addAFMexchange_param_11];
	ld.param.u32 	%r6, [addAFMexchange_param_16];
	ld.param.u32 	%r7, [addAFMexchange_param_17];
	ld.param.u32 	%r8, [addAFMexchange_param_18];
	mov.u32 	%r9, %ntid.x;
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r1, %r9, %r10, %r11;
	mov.u32 	%r12, %ntid.y;
	mov.u32 	%r13, %ctaid.y;
	mov.u32 	%r14, %tid.y;
	mad.lo.s32 	%r2, %r12, %r13, %r14;
	mov.u32 	%r15, %ntid.z;
	mov.u32 	%r16, %ctaid.z;
	mov.u32 	%r17, %tid.z;
	mad.lo.s32 	%r3, %r15, %r16, %r17;
	setp.ge.s32	%p1, %r2, %r7;
	setp.ge.s32	%p2, %r1, %r6;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r8;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_9;

	cvta.to.global.u64 	%rd8, %rd6;
	cvta.to.global.u64 	%rd9, %rd5;
	cvta.to.global.u64 	%rd10, %rd4;
	cvta.to.global.u64 	%rd11, %rd1;
	mad.lo.s32 	%r18, %r3, %r7, %r2;
	mad.lo.s32 	%r19, %r18, %r6, %r1;
	mul.wide.s32 	%rd12, %r19, 4;
	add.s64 	%rd13, %rd10, %rd12;
	ld.global.f32 	%f1, [%rd13];
	add.s64 	%rd14, %rd9, %rd12;
	ld.global.f32 	%f2, [%rd14];
	add.s64 	%rd15, %rd8, %rd12;
	ld.global.f32 	%f3, [%rd15];
	add.s64 	%rd16, %rd11, %rd12;
	ld.global.f32 	%f54, [%rd16];
	cvta.to.global.u64 	%rd17, %rd2;
	add.s64 	%rd18, %rd17, %rd12;
	ld.global.f32 	%f55, [%rd18];
	cvta.to.global.u64 	%rd19, %rd3;
	add.s64 	%rd20, %rd19, %rd12;
	ld.global.f32 	%f56, [%rd20];
	setp.eq.s64	%p6, %rd7, 0;
	@%p6 bra 	BB0_3;

	cvta.to.global.u64 	%rd21, %rd7;
	add.s64 	%rd23, %rd21, %rd12;
	ld.global.f32 	%f24, [%rd23];
	mul.f32 	%f8, %f24, %f8;

BB0_3:
	setp.eq.f32	%p7, %f21, 0f00000000;
	@%p7 bra 	BB0_8;

	setp.ne.s32	%p8, %r3, %r4;
	@%p8 bra 	BB0_6;

	mad.lo.s32 	%r42, %r7, %r5, %r2;
	mad.lo.s32 	%r47, %r42, %r6, %r1;
	mul.wide.s32 	%rd25, %r47, 4;
	add.s64 	%rd26, %rd10, %rd25;
	add.s64 	%rd28, %rd9, %rd25;
	add.s64 	%rd30, %rd8, %rd25;
	ld.global.f32 	%f25, [%rd26];
	ld.global.f32 	%f26, [%rd28];
	mul.f32 	%f27, %f26, %f26;
	fma.rn.f32 	%f28, %f25, %f25, %f27;
	ld.global.f32 	%f29, [%rd30];
	fma.rn.f32 	%f30, %f29, %f29, %f28;
	setp.eq.f32	%p9, %f30, 0f00000000;
	selp.f32	%f31, %f1, %f25, %p9;
	selp.f32	%f32, %f2, %f26, %p9;
	selp.f32	%f33, %f3, %f29, %p9;
	div.rn.f32 	%f34, %f21, %f8;
	div.rn.f32 	%f35, %f34, %f22;
	sub.f32 	%f36, %f31, %f1;
	sub.f32 	%f37, %f32, %f2;
	sub.f32 	%f38, %f33, %f3;
	fma.rn.f32 	%f54, %f35, %f36, %f54;
	fma.rn.f32 	%f55, %f35, %f37, %f55;
	fma.rn.f32 	%f56, %f35, %f38, %f56;

BB0_6:
	setp.ne.s32	%p10, %r3, %r5;
	@%p10 bra 	BB0_8;

	mad.lo.s32 	%r56, %r7, %r4, %r2;
	mad.lo.s32 	%r61, %r56, %r6, %r1;
	mul.wide.s32 	%rd32, %r61, 4;
	add.s64 	%rd33, %rd10, %rd32;
	add.s64 	%rd35, %rd9, %rd32;
	add.s64 	%rd37, %rd8, %rd32;
	ld.global.f32 	%f39, [%rd33];
	ld.global.f32 	%f40, [%rd35];
	mul.f32 	%f41, %f40, %f40;
	fma.rn.f32 	%f42, %f39, %f39, %f41;
	ld.global.f32 	%f43, [%rd37];
	fma.rn.f32 	%f44, %f43, %f43, %f42;
	setp.eq.f32	%p11, %f44, 0f00000000;
	selp.f32	%f45, %f3, %f43, %p11;
	selp.f32	%f46, %f2, %f40, %p11;
	selp.f32	%f47, %f1, %f39, %p11;
	div.rn.f32 	%f48, %f21, %f8;
	div.rn.f32 	%f49, %f48, %f22;
	sub.f32 	%f50, %f47, %f1;
	sub.f32 	%f51, %f46, %f2;
	sub.f32 	%f52, %f45, %f3;
	fma.rn.f32 	%f54, %f49, %f50, %f54;
	fma.rn.f32 	%f55, %f49, %f51, %f55;
	fma.rn.f32 	%f56, %f49, %f52, %f56;

BB0_8:
	st.global.f32 	[%rd16], %f54;
	st.global.f32 	[%rd18], %f55;
	st.global.f32 	[%rd20], %f56;

BB0_9:
	ret;
}


`
)
