package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for initmLLBJH kernel
var initmLLBJH_code cu.Function

// Stores the arguments for initmLLBJH kernel invocation
type initmLLBJH_args_t struct {
	arg_mx         unsafe.Pointer
	arg_my         unsafe.Pointer
	arg_mz         unsafe.Pointer
	arg_tempJH     unsafe.Pointer
	arg_TCurie_    unsafe.Pointer
	arg_TCurie_mul float32
	arg_N          int
	arg_Langevin   int
	argptr         [8]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for initmLLBJH kernel invocation
var initmLLBJH_args initmLLBJH_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	initmLLBJH_args.argptr[0] = unsafe.Pointer(&initmLLBJH_args.arg_mx)
	initmLLBJH_args.argptr[1] = unsafe.Pointer(&initmLLBJH_args.arg_my)
	initmLLBJH_args.argptr[2] = unsafe.Pointer(&initmLLBJH_args.arg_mz)
	initmLLBJH_args.argptr[3] = unsafe.Pointer(&initmLLBJH_args.arg_tempJH)
	initmLLBJH_args.argptr[4] = unsafe.Pointer(&initmLLBJH_args.arg_TCurie_)
	initmLLBJH_args.argptr[5] = unsafe.Pointer(&initmLLBJH_args.arg_TCurie_mul)
	initmLLBJH_args.argptr[6] = unsafe.Pointer(&initmLLBJH_args.arg_N)
	initmLLBJH_args.argptr[7] = unsafe.Pointer(&initmLLBJH_args.arg_Langevin)
}

// Wrapper for initmLLBJH CUDA kernel, asynchronous.
func k_initmLLBJH_async(mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, tempJH unsafe.Pointer, TCurie_ unsafe.Pointer, TCurie_mul float32, N int, Langevin int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("initmLLBJH")
	}

	initmLLBJH_args.Lock()
	defer initmLLBJH_args.Unlock()

	if initmLLBJH_code == 0 {
		initmLLBJH_code = fatbinLoad(initmLLBJH_map, "initmLLBJH")
	}

	initmLLBJH_args.arg_mx = mx
	initmLLBJH_args.arg_my = my
	initmLLBJH_args.arg_mz = mz
	initmLLBJH_args.arg_tempJH = tempJH
	initmLLBJH_args.arg_TCurie_ = TCurie_
	initmLLBJH_args.arg_TCurie_mul = TCurie_mul
	initmLLBJH_args.arg_N = N
	initmLLBJH_args.arg_Langevin = Langevin

	args := initmLLBJH_args.argptr[:]
	cu.LaunchKernel(initmLLBJH_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("initmLLBJH")
	}
}

// maps compute capability on PTX code for initmLLBJH kernel.
var initmLLBJH_map = map[int]string{0: "",
	30: initmLLBJH_ptx_30}

// initmLLBJH PTX code for various compute capabilities.
const (
	initmLLBJH_ptx_30 = `
.version 6.5
.target sm_30
.address_size 64

	// .globl	initmLLBJH

.visible .entry initmLLBJH(
	.param .u64 initmLLBJH_param_0,
	.param .u64 initmLLBJH_param_1,
	.param .u64 initmLLBJH_param_2,
	.param .u64 initmLLBJH_param_3,
	.param .u64 initmLLBJH_param_4,
	.param .f32 initmLLBJH_param_5,
	.param .u32 initmLLBJH_param_6,
	.param .u32 initmLLBJH_param_7
)
{
	.reg .pred 	%p<59>;
	.reg .f32 	%f<350>;
	.reg .b32 	%r<64>;
	.reg .b64 	%rd<47>;


	ld.param.u64 	%rd1, [initmLLBJH_param_0];
	ld.param.u64 	%rd2, [initmLLBJH_param_1];
	ld.param.u64 	%rd3, [initmLLBJH_param_2];
	ld.param.u64 	%rd4, [initmLLBJH_param_3];
	ld.param.u64 	%rd5, [initmLLBJH_param_4];
	ld.param.f32 	%f340, [initmLLBJH_param_5];
	ld.param.u32 	%r2, [initmLLBJH_param_6];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p4, %r1, %r2;
	@%p4 bra 	BB0_40;

	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	cvta.to.global.u64 	%rd9, %rd2;
	add.s64 	%rd10, %rd9, %rd7;
	ld.global.f32 	%f2, [%rd10];
	cvta.to.global.u64 	%rd11, %rd3;
	add.s64 	%rd12, %rd11, %rd7;
	ld.global.f32 	%f3, [%rd12];
	setp.eq.s64	%p5, %rd5, 0;
	@%p5 bra 	BB0_3;

	cvta.to.global.u64 	%rd13, %rd5;
	add.s64 	%rd15, %rd13, %rd7;
	ld.global.f32 	%f51, [%rd15];
	mul.f32 	%f340, %f51, %f340;

BB0_3:
	cvta.to.global.u64 	%rd16, %rd4;
	add.s64 	%rd18, %rd16, %rd7;
	ld.global.f32 	%f52, [%rd18];
	setp.eq.f32	%p6, %f52, 0f00000000;
	selp.f32	%f6, 0f38D1B717, %f52, %p6;
	mul.f32 	%f53, %f2, %f2;
	fma.rn.f32 	%f54, %f1, %f1, %f53;
	fma.rn.f32 	%f7, %f3, %f3, %f54;
	setp.eq.f32	%p7, %f7, 0f00000000;
	setp.eq.f32	%p8, %f340, 0f00000000;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	BB0_40;

	abs.f32 	%f9, %f7;
	setp.lt.f32	%p10, %f9, 0f00800000;
	mul.f32 	%f60, %f9, 0f4B800000;
	selp.f32	%f61, 0fC3170000, 0fC2FE0000, %p10;
	selp.f32	%f62, %f60, %f9, %p10;
	mov.b32 	 %r9, %f62;
	and.b32  	%r10, %r9, 8388607;
	or.b32  	%r11, %r10, 1065353216;
	mov.b32 	 %f63, %r11;
	shr.u32 	%r12, %r9, 23;
	cvt.rn.f32.u32	%f64, %r12;
	add.f32 	%f65, %f61, %f64;
	setp.gt.f32	%p11, %f63, 0f3FB504F3;
	mul.f32 	%f66, %f63, 0f3F000000;
	add.f32 	%f67, %f65, 0f3F800000;
	selp.f32	%f68, %f66, %f63, %p11;
	selp.f32	%f69, %f67, %f65, %p11;
	add.f32 	%f70, %f68, 0fBF800000;
	add.f32 	%f56, %f68, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f55,%f56;
	// inline asm
	add.f32 	%f71, %f70, %f70;
	mul.f32 	%f72, %f55, %f71;
	mul.f32 	%f73, %f72, %f72;
	mov.f32 	%f74, 0f3C4CAF63;
	mov.f32 	%f75, 0f3B18F0FE;
	fma.rn.f32 	%f76, %f75, %f73, %f74;
	mov.f32 	%f77, 0f3DAAAABD;
	fma.rn.f32 	%f78, %f76, %f73, %f77;
	mul.rn.f32 	%f79, %f78, %f73;
	mul.rn.f32 	%f80, %f79, %f72;
	sub.f32 	%f81, %f70, %f72;
	neg.f32 	%f82, %f72;
	add.f32 	%f83, %f81, %f81;
	fma.rn.f32 	%f84, %f82, %f70, %f83;
	mul.rn.f32 	%f85, %f55, %f84;
	add.f32 	%f86, %f80, %f72;
	sub.f32 	%f87, %f72, %f86;
	add.f32 	%f88, %f80, %f87;
	add.f32 	%f89, %f85, %f88;
	add.f32 	%f90, %f86, %f89;
	sub.f32 	%f91, %f86, %f90;
	add.f32 	%f92, %f89, %f91;
	mov.f32 	%f93, 0f3F317200;
	mul.rn.f32 	%f94, %f69, %f93;
	mov.f32 	%f95, 0f35BFBE8E;
	mul.rn.f32 	%f96, %f69, %f95;
	add.f32 	%f97, %f94, %f90;
	sub.f32 	%f98, %f94, %f97;
	add.f32 	%f99, %f90, %f98;
	add.f32 	%f100, %f92, %f99;
	add.f32 	%f101, %f96, %f100;
	add.f32 	%f102, %f97, %f101;
	sub.f32 	%f103, %f97, %f102;
	add.f32 	%f104, %f101, %f103;
	mov.f32 	%f105, 0f3F000000;
	mul.rn.f32 	%f106, %f105, %f102;
	neg.f32 	%f107, %f106;
	fma.rn.f32 	%f108, %f105, %f102, %f107;
	fma.rn.f32 	%f109, %f105, %f104, %f108;
	mov.f32 	%f110, 0f00000000;
	fma.rn.f32 	%f111, %f110, %f102, %f109;
	add.rn.f32 	%f112, %f106, %f111;
	neg.f32 	%f113, %f112;
	add.rn.f32 	%f114, %f106, %f113;
	add.rn.f32 	%f115, %f114, %f111;
	mov.b32 	 %r13, %f112;
	setp.eq.s32	%p12, %r13, 1118925336;
	add.s32 	%r14, %r13, -1;
	mov.b32 	 %f116, %r14;
	add.f32 	%f117, %f115, 0f37000000;
	selp.f32	%f118, %f116, %f112, %p12;
	selp.f32	%f10, %f117, %f115, %p12;
	mul.f32 	%f119, %f118, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f120, %f119;
	mov.f32 	%f121, 0fBF317200;
	fma.rn.f32 	%f122, %f120, %f121, %f118;
	mov.f32 	%f123, 0fB5BFBE8E;
	fma.rn.f32 	%f124, %f120, %f123, %f122;
	mul.f32 	%f125, %f124, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f126, %f125;
	add.f32 	%f127, %f120, 0f00000000;
	ex2.approx.f32 	%f128, %f127;
	mul.f32 	%f129, %f126, %f128;
	setp.lt.f32	%p13, %f118, 0fC2D20000;
	selp.f32	%f130, 0f00000000, %f129, %p13;
	setp.gt.f32	%p14, %f118, 0f42D20000;
	selp.f32	%f341, 0f7F800000, %f130, %p14;
	setp.eq.f32	%p15, %f341, 0f7F800000;
	@%p15 bra 	BB0_6;

	fma.rn.f32 	%f341, %f341, %f10, %f341;

BB0_6:
	mov.f32 	%f313, 0f3E800000;
	cvt.rzi.f32.f32	%f312, %f313;
	fma.rn.f32 	%f311, %f312, 0fC0000000, 0f3F000000;
	abs.f32 	%f310, %f311;
	setp.lt.f32	%p16, %f7, 0f00000000;
	setp.eq.f32	%p17, %f310, 0f3F800000;
	and.pred  	%p1, %p16, %p17;
	mov.b32 	 %r15, %f341;
	xor.b32  	%r16, %r15, -2147483648;
	mov.b32 	 %f131, %r16;
	selp.f32	%f343, %f131, %f341, %p1;
	@%p7 bra 	BB0_9;
	bra.uni 	BB0_7;

BB0_9:
	add.f32 	%f134, %f7, %f7;
	selp.f32	%f343, %f134, 0f00000000, %p17;
	bra.uni 	BB0_10;

BB0_7:
	setp.geu.f32	%p19, %f7, 0f00000000;
	@%p19 bra 	BB0_10;

	mov.f32 	%f330, 0f3F000000;
	cvt.rzi.f32.f32	%f133, %f330;
	setp.neu.f32	%p20, %f133, 0f3F000000;
	selp.f32	%f343, 0f7FFFFFFF, %f343, %p20;

BB0_10:
	add.f32 	%f135, %f9, 0f3F000000;
	mov.b32 	 %r17, %f135;
	setp.lt.s32	%p22, %r17, 2139095040;
	@%p22 bra 	BB0_15;

	setp.gtu.f32	%p23, %f9, 0f7F800000;
	@%p23 bra 	BB0_14;
	bra.uni 	BB0_12;

BB0_14:
	add.f32 	%f343, %f7, 0f3F000000;
	bra.uni 	BB0_15;

BB0_12:
	setp.neu.f32	%p24, %f9, 0f7F800000;
	@%p24 bra 	BB0_15;

	selp.f32	%f343, 0fFF800000, 0f7F800000, %p1;

BB0_15:
	setp.eq.f32	%p25, %f7, 0f3F800000;
	selp.f32	%f21, 0f3F800000, %f343, %p25;
	setp.gtu.f32	%p26, %f6, %f340;
	@%p26 bra 	BB0_39;
	bra.uni 	BB0_16;

BB0_39:
	ld.param.u64 	%rd46, [initmLLBJH_param_0];
	mov.u32 	%r63, %ctaid.x;
	mov.u32 	%r62, %ctaid.y;
	mov.u32 	%r61, %nctaid.x;
	mov.u32 	%r60, %tid.x;
	mov.u32 	%r59, %ntid.x;
	mad.lo.s32 	%r58, %r61, %r62, %r63;
	mad.lo.s32 	%r57, %r58, %r59, %r60;
	mul.wide.s32 	%rd45, %r57, 4;
	cvta.to.global.u64 	%rd44, %rd46;
	add.s64 	%rd43, %rd44, %rd45;
	mov.f32 	%f305, 0f38D1B717;
	div.rn.f32 	%f306, %f305, %f21;
	mul.f32 	%f307, %f1, %f306;
	st.global.f32 	[%rd43], %f307;
	mul.f32 	%f308, %f306, %f2;
	st.global.f32 	[%rd10], %f308;
	mul.f32 	%f309, %f306, %f3;
	st.global.f32 	[%rd12], %f309;
	bra.uni 	BB0_40;

BB0_16:
	mov.f32 	%f321, 0fB5BFBE8E;
	mov.f32 	%f320, 0fBF317200;
	mov.f32 	%f319, 0f00000000;
	mov.f32 	%f318, 0f35BFBE8E;
	mov.f32 	%f317, 0f3F317200;
	mov.f32 	%f316, 0f3DAAAABD;
	mov.f32 	%f315, 0f3C4CAF63;
	mov.f32 	%f314, 0f3B18F0FE;
	div.rn.f32 	%f22, %f6, %f340;
	mov.f32 	%f138, 0f3FDF5C29;
	cvt.rzi.f32.f32	%f139, %f138;
	fma.rn.f32 	%f140, %f139, 0fC0000000, 0f405F5C29;
	abs.f32 	%f23, %f140;
	abs.f32 	%f24, %f22;
	setp.lt.f32	%p27, %f24, 0f00800000;
	mul.f32 	%f141, %f24, 0f4B800000;
	selp.f32	%f142, 0fC3170000, 0fC2FE0000, %p27;
	selp.f32	%f143, %f141, %f24, %p27;
	mov.b32 	 %r18, %f143;
	and.b32  	%r19, %r18, 8388607;
	or.b32  	%r20, %r19, 1065353216;
	mov.b32 	 %f144, %r20;
	shr.u32 	%r21, %r18, 23;
	cvt.rn.f32.u32	%f145, %r21;
	add.f32 	%f146, %f142, %f145;
	setp.gt.f32	%p28, %f144, 0f3FB504F3;
	mul.f32 	%f147, %f144, 0f3F000000;
	add.f32 	%f148, %f146, 0f3F800000;
	selp.f32	%f149, %f147, %f144, %p28;
	selp.f32	%f150, %f148, %f146, %p28;
	add.f32 	%f151, %f149, 0fBF800000;
	add.f32 	%f137, %f149, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f136,%f137;
	// inline asm
	add.f32 	%f152, %f151, %f151;
	mul.f32 	%f153, %f136, %f152;
	mul.f32 	%f154, %f153, %f153;
	fma.rn.f32 	%f157, %f314, %f154, %f315;
	fma.rn.f32 	%f159, %f157, %f154, %f316;
	mul.rn.f32 	%f160, %f159, %f154;
	mul.rn.f32 	%f161, %f160, %f153;
	sub.f32 	%f162, %f151, %f153;
	neg.f32 	%f163, %f153;
	add.f32 	%f164, %f162, %f162;
	fma.rn.f32 	%f165, %f163, %f151, %f164;
	mul.rn.f32 	%f166, %f136, %f165;
	add.f32 	%f167, %f161, %f153;
	sub.f32 	%f168, %f153, %f167;
	add.f32 	%f169, %f161, %f168;
	add.f32 	%f170, %f166, %f169;
	add.f32 	%f171, %f167, %f170;
	sub.f32 	%f172, %f167, %f171;
	add.f32 	%f173, %f170, %f172;
	mul.rn.f32 	%f175, %f150, %f317;
	mul.rn.f32 	%f177, %f150, %f318;
	add.f32 	%f178, %f175, %f171;
	sub.f32 	%f179, %f175, %f178;
	add.f32 	%f180, %f171, %f179;
	add.f32 	%f181, %f173, %f180;
	add.f32 	%f182, %f177, %f181;
	add.f32 	%f183, %f178, %f182;
	sub.f32 	%f184, %f178, %f183;
	add.f32 	%f185, %f182, %f184;
	mov.f32 	%f186, 0f405F5C29;
	mul.rn.f32 	%f187, %f186, %f183;
	neg.f32 	%f188, %f187;
	fma.rn.f32 	%f189, %f186, %f183, %f188;
	fma.rn.f32 	%f190, %f186, %f185, %f189;
	fma.rn.f32 	%f192, %f319, %f183, %f190;
	add.rn.f32 	%f193, %f187, %f192;
	neg.f32 	%f194, %f193;
	add.rn.f32 	%f195, %f187, %f194;
	add.rn.f32 	%f196, %f195, %f192;
	mov.b32 	 %r22, %f193;
	setp.eq.s32	%p29, %r22, 1118925336;
	add.s32 	%r23, %r22, -1;
	mov.b32 	 %f197, %r23;
	add.f32 	%f198, %f196, 0f37000000;
	selp.f32	%f199, %f197, %f193, %p29;
	selp.f32	%f25, %f198, %f196, %p29;
	mul.f32 	%f200, %f199, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f201, %f200;
	fma.rn.f32 	%f203, %f201, %f320, %f199;
	fma.rn.f32 	%f205, %f201, %f321, %f203;
	mul.f32 	%f206, %f205, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f207, %f206;
	add.f32 	%f208, %f201, 0f00000000;
	ex2.approx.f32 	%f209, %f208;
	mul.f32 	%f210, %f207, %f209;
	setp.lt.f32	%p30, %f199, 0fC2D20000;
	selp.f32	%f211, 0f00000000, %f210, %p30;
	setp.gt.f32	%p31, %f199, 0f42D20000;
	selp.f32	%f344, 0f7F800000, %f211, %p31;
	setp.eq.f32	%p32, %f344, 0f7F800000;
	@%p32 bra 	BB0_18;

	fma.rn.f32 	%f344, %f344, %f25, %f344;

BB0_18:
	setp.lt.f32	%p33, %f22, 0f00000000;
	setp.eq.f32	%p34, %f23, 0f3F800000;
	and.pred  	%p2, %p33, %p34;
	mov.b32 	 %r24, %f344;
	xor.b32  	%r25, %r24, -2147483648;
	mov.b32 	 %f212, %r25;
	selp.f32	%f346, %f212, %f344, %p2;
	setp.eq.f32	%p35, %f22, 0f00000000;
	@%p35 bra 	BB0_21;
	bra.uni 	BB0_19;

BB0_21:
	add.f32 	%f215, %f22, %f22;
	selp.f32	%f346, %f215, 0f00000000, %p34;
	bra.uni 	BB0_22;

BB0_19:
	setp.geu.f32	%p36, %f22, 0f00000000;
	@%p36 bra 	BB0_22;

	mov.f32 	%f331, 0f405F5C29;
	cvt.rzi.f32.f32	%f214, %f331;
	setp.neu.f32	%p37, %f214, 0f405F5C29;
	selp.f32	%f346, 0f7FFFFFFF, %f346, %p37;

BB0_22:
	add.f32 	%f216, %f24, 0f405F5C29;
	mov.b32 	 %r26, %f216;
	setp.lt.s32	%p39, %r26, 2139095040;
	@%p39 bra 	BB0_27;

	setp.gtu.f32	%p40, %f24, 0f7F800000;
	@%p40 bra 	BB0_26;
	bra.uni 	BB0_24;

BB0_26:
	add.f32 	%f346, %f22, 0f405F5C29;
	bra.uni 	BB0_27;

BB0_24:
	setp.neu.f32	%p41, %f24, 0f7F800000;
	@%p41 bra 	BB0_27;

	selp.f32	%f346, 0fFF800000, 0f7F800000, %p2;

BB0_27:
	mov.f32 	%f329, 0fB5BFBE8E;
	mov.f32 	%f328, 0fBF317200;
	mov.f32 	%f327, 0f00000000;
	mov.f32 	%f326, 0f35BFBE8E;
	mov.f32 	%f325, 0f3F317200;
	mov.f32 	%f324, 0f3DAAAABD;
	mov.f32 	%f323, 0f3C4CAF63;
	mov.f32 	%f322, 0f3B18F0FE;
	mov.f32 	%f219, 0f3F800000;
	sub.f32 	%f220, %f219, %f346;
	setp.eq.f32	%p42, %f22, 0f3F800000;
	selp.f32	%f36, 0f00000000, %f220, %p42;
	abs.f32 	%f38, %f36;
	setp.lt.f32	%p43, %f38, 0f00800000;
	mul.f32 	%f224, %f38, 0f4B800000;
	selp.f32	%f225, 0fC3170000, 0fC2FE0000, %p43;
	selp.f32	%f226, %f224, %f38, %p43;
	mov.b32 	 %r27, %f226;
	and.b32  	%r28, %r27, 8388607;
	or.b32  	%r29, %r28, 1065353216;
	mov.b32 	 %f227, %r29;
	shr.u32 	%r30, %r27, 23;
	cvt.rn.f32.u32	%f228, %r30;
	add.f32 	%f229, %f225, %f228;
	setp.gt.f32	%p44, %f227, 0f3FB504F3;
	mul.f32 	%f230, %f227, 0f3F000000;
	add.f32 	%f231, %f229, 0f3F800000;
	selp.f32	%f232, %f230, %f227, %p44;
	selp.f32	%f233, %f231, %f229, %p44;
	add.f32 	%f234, %f232, 0fBF800000;
	add.f32 	%f218, %f232, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f217,%f218;
	// inline asm
	add.f32 	%f235, %f234, %f234;
	mul.f32 	%f236, %f217, %f235;
	mul.f32 	%f237, %f236, %f236;
	fma.rn.f32 	%f240, %f322, %f237, %f323;
	fma.rn.f32 	%f242, %f240, %f237, %f324;
	mul.rn.f32 	%f243, %f242, %f237;
	mul.rn.f32 	%f244, %f243, %f236;
	sub.f32 	%f245, %f234, %f236;
	neg.f32 	%f246, %f236;
	add.f32 	%f247, %f245, %f245;
	fma.rn.f32 	%f248, %f246, %f234, %f247;
	mul.rn.f32 	%f249, %f217, %f248;
	add.f32 	%f250, %f244, %f236;
	sub.f32 	%f251, %f236, %f250;
	add.f32 	%f252, %f244, %f251;
	add.f32 	%f253, %f249, %f252;
	add.f32 	%f254, %f250, %f253;
	sub.f32 	%f255, %f250, %f254;
	add.f32 	%f256, %f253, %f255;
	mul.rn.f32 	%f258, %f233, %f325;
	mul.rn.f32 	%f260, %f233, %f326;
	add.f32 	%f261, %f258, %f254;
	sub.f32 	%f262, %f258, %f261;
	add.f32 	%f263, %f254, %f262;
	add.f32 	%f264, %f256, %f263;
	add.f32 	%f265, %f260, %f264;
	add.f32 	%f266, %f261, %f265;
	sub.f32 	%f267, %f261, %f266;
	add.f32 	%f268, %f265, %f267;
	mov.f32 	%f269, 0f3F0A3D71;
	mul.rn.f32 	%f270, %f269, %f266;
	neg.f32 	%f271, %f270;
	fma.rn.f32 	%f272, %f269, %f266, %f271;
	fma.rn.f32 	%f273, %f269, %f268, %f272;
	fma.rn.f32 	%f275, %f327, %f266, %f273;
	add.rn.f32 	%f276, %f270, %f275;
	neg.f32 	%f277, %f276;
	add.rn.f32 	%f278, %f270, %f277;
	add.rn.f32 	%f279, %f278, %f275;
	mov.b32 	 %r31, %f276;
	setp.eq.s32	%p45, %r31, 1118925336;
	add.s32 	%r32, %r31, -1;
	mov.b32 	 %f280, %r32;
	add.f32 	%f281, %f279, 0f37000000;
	selp.f32	%f282, %f280, %f276, %p45;
	selp.f32	%f39, %f281, %f279, %p45;
	mul.f32 	%f283, %f282, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f284, %f283;
	fma.rn.f32 	%f286, %f284, %f328, %f282;
	fma.rn.f32 	%f288, %f284, %f329, %f286;
	mul.f32 	%f289, %f288, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f290, %f289;
	add.f32 	%f291, %f284, 0f00000000;
	ex2.approx.f32 	%f292, %f291;
	mul.f32 	%f293, %f290, %f292;
	setp.lt.f32	%p46, %f282, 0fC2D20000;
	selp.f32	%f294, 0f00000000, %f293, %p46;
	setp.gt.f32	%p47, %f282, 0f42D20000;
	selp.f32	%f347, 0f7F800000, %f294, %p47;
	setp.eq.f32	%p48, %f347, 0f7F800000;
	@%p48 bra 	BB0_29;

	fma.rn.f32 	%f347, %f347, %f39, %f347;

BB0_29:
	mov.f32 	%f335, 0f3E8A3D71;
	cvt.rzi.f32.f32	%f334, %f335;
	fma.rn.f32 	%f333, %f334, 0fC0000000, 0f3F0A3D71;
	abs.f32 	%f332, %f333;
	setp.lt.f32	%p49, %f36, 0f00000000;
	setp.eq.f32	%p50, %f332, 0f3F800000;
	and.pred  	%p3, %p49, %p50;
	mov.b32 	 %r33, %f347;
	xor.b32  	%r34, %r33, -2147483648;
	mov.b32 	 %f295, %r34;
	selp.f32	%f349, %f295, %f347, %p3;
	setp.eq.f32	%p51, %f36, 0f00000000;
	@%p51 bra 	BB0_32;
	bra.uni 	BB0_30;

BB0_32:
	add.f32 	%f298, %f36, %f36;
	selp.f32	%f349, %f298, 0f00000000, %p50;
	bra.uni 	BB0_33;

BB0_30:
	setp.geu.f32	%p52, %f36, 0f00000000;
	@%p52 bra 	BB0_33;

	mov.f32 	%f339, 0f3F0A3D71;
	cvt.rzi.f32.f32	%f297, %f339;
	setp.neu.f32	%p53, %f297, 0f3F0A3D71;
	selp.f32	%f349, 0f7FFFFFFF, %f349, %p53;

BB0_33:
	abs.f32 	%f336, %f36;
	add.f32 	%f299, %f336, 0f3F0A3D71;
	mov.b32 	 %r35, %f299;
	setp.lt.s32	%p55, %r35, 2139095040;
	@%p55 bra 	BB0_38;

	abs.f32 	%f337, %f36;
	setp.gtu.f32	%p56, %f337, 0f7F800000;
	@%p56 bra 	BB0_37;
	bra.uni 	BB0_35;

BB0_37:
	add.f32 	%f349, %f36, 0f3F0A3D71;
	bra.uni 	BB0_38;

BB0_35:
	abs.f32 	%f338, %f36;
	setp.neu.f32	%p57, %f338, 0f7F800000;
	@%p57 bra 	BB0_38;

	selp.f32	%f349, 0fFF800000, 0f7F800000, %p3;

BB0_38:
	mov.u32 	%r56, %ctaid.x;
	mov.u32 	%r55, %ctaid.y;
	mov.u32 	%r54, %nctaid.x;
	mov.u32 	%r53, %tid.x;
	mov.u32 	%r52, %ntid.x;
	mad.lo.s32 	%r51, %r54, %r55, %r56;
	mad.lo.s32 	%r50, %r51, %r52, %r53;
	mul.wide.s32 	%rd42, %r50, 4;
	ld.param.u64 	%rd41, [initmLLBJH_param_2];
	cvta.to.global.u64 	%rd40, %rd41;
	add.s64 	%rd39, %rd40, %rd42;
	ld.param.u64 	%rd38, [initmLLBJH_param_1];
	cvta.to.global.u64 	%rd37, %rd38;
	add.s64 	%rd36, %rd37, %rd42;
	ld.param.u64 	%rd35, [initmLLBJH_param_0];
	cvta.to.global.u64 	%rd34, %rd35;
	add.s64 	%rd33, %rd34, %rd42;
	setp.eq.f32	%p58, %f36, 0f3F800000;
	selp.f32	%f300, 0f3F800000, %f349, %p58;
	div.rn.f32 	%f301, %f300, %f21;
	mul.f32 	%f302, %f1, %f301;
	st.global.f32 	[%rd33], %f302;
	mul.f32 	%f303, %f301, %f2;
	st.global.f32 	[%rd36], %f303;
	mul.f32 	%f304, %f301, %f3;
	st.global.f32 	[%rd39], %f304;

BB0_40:
	ret;
}


`
)
