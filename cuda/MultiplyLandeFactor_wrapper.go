package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for MultiplyLandeFactor kernel
var MultiplyLandeFactor_code cu.Function

// Stores the arguments for MultiplyLandeFactor kernel invocation
type MultiplyLandeFactor_args_t struct {
	arg_Bx    unsafe.Pointer
	arg_By    unsafe.Pointer
	arg_Bz    unsafe.Pointer
	arg_g_    unsafe.Pointer
	arg_g_mul float32
	arg_N     int
	argptr    [6]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for MultiplyLandeFactor kernel invocation
var MultiplyLandeFactor_args MultiplyLandeFactor_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	MultiplyLandeFactor_args.argptr[0] = unsafe.Pointer(&MultiplyLandeFactor_args.arg_Bx)
	MultiplyLandeFactor_args.argptr[1] = unsafe.Pointer(&MultiplyLandeFactor_args.arg_By)
	MultiplyLandeFactor_args.argptr[2] = unsafe.Pointer(&MultiplyLandeFactor_args.arg_Bz)
	MultiplyLandeFactor_args.argptr[3] = unsafe.Pointer(&MultiplyLandeFactor_args.arg_g_)
	MultiplyLandeFactor_args.argptr[4] = unsafe.Pointer(&MultiplyLandeFactor_args.arg_g_mul)
	MultiplyLandeFactor_args.argptr[5] = unsafe.Pointer(&MultiplyLandeFactor_args.arg_N)
}

// Wrapper for MultiplyLandeFactor CUDA kernel, asynchronous.
func k_MultiplyLandeFactor_async(Bx unsafe.Pointer, By unsafe.Pointer, Bz unsafe.Pointer, g_ unsafe.Pointer, g_mul float32, N int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("MultiplyLandeFactor")
	}

	MultiplyLandeFactor_args.Lock()
	defer MultiplyLandeFactor_args.Unlock()

	if MultiplyLandeFactor_code == 0 {
		MultiplyLandeFactor_code = fatbinLoad(MultiplyLandeFactor_map, "MultiplyLandeFactor")
	}

	MultiplyLandeFactor_args.arg_Bx = Bx
	MultiplyLandeFactor_args.arg_By = By
	MultiplyLandeFactor_args.arg_Bz = Bz
	MultiplyLandeFactor_args.arg_g_ = g_
	MultiplyLandeFactor_args.arg_g_mul = g_mul
	MultiplyLandeFactor_args.arg_N = N

	args := MultiplyLandeFactor_args.argptr[:]
	cu.LaunchKernel(MultiplyLandeFactor_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("MultiplyLandeFactor")
	}
}

// maps compute capability on PTX code for MultiplyLandeFactor kernel.
var MultiplyLandeFactor_map = map[int]string{0: "",
	70: MultiplyLandeFactor_ptx_70}

// MultiplyLandeFactor PTX code for various compute capabilities.
const (
	MultiplyLandeFactor_ptx_70 = `
.version 7.2
.target sm_70
.address_size 64

	// .globl	MultiplyLandeFactor

.visible .entry MultiplyLandeFactor(
	.param .u64 MultiplyLandeFactor_param_0,
	.param .u64 MultiplyLandeFactor_param_1,
	.param .u64 MultiplyLandeFactor_param_2,
	.param .u64 MultiplyLandeFactor_param_3,
	.param .f32 MultiplyLandeFactor_param_4,
	.param .u32 MultiplyLandeFactor_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<14>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd1, [MultiplyLandeFactor_param_0];
	ld.param.u64 	%rd2, [MultiplyLandeFactor_param_1];
	ld.param.u64 	%rd3, [MultiplyLandeFactor_param_2];
	ld.param.u64 	%rd4, [MultiplyLandeFactor_param_3];
	ld.param.f32 	%f13, [MultiplyLandeFactor_param_4];
	ld.param.u32 	%r2, [MultiplyLandeFactor_param_5];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	LBB0_4;

	setp.eq.s64 	%p2, %rd4, 0;
	@%p2 bra 	LBB0_3;

	cvta.to.global.u64 	%rd5, %rd4;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.nc.f32 	%f4, [%rd7];
	mul.f32 	%f13, %f4, %f13;

LBB0_3:
	mul.f32 	%f5, %f13, 0f3F000000;
	setp.eq.f32 	%p3, %f5, 0f00000000;
	selp.f32 	%f6, 0f3F800000, %f5, %p3;
	cvta.to.global.u64 	%rd8, %rd1;
	mul.wide.s32 	%rd9, %r1, 4;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.f32 	%f7, [%rd10];
	mul.f32 	%f8, %f7, %f6;
	st.global.f32 	[%rd10], %f8;
	cvta.to.global.u64 	%rd11, %rd2;
	add.s64 	%rd12, %rd11, %rd9;
	ld.global.f32 	%f9, [%rd12];
	mul.f32 	%f10, %f6, %f9;
	st.global.f32 	[%rd12], %f10;
	cvta.to.global.u64 	%rd13, %rd3;
	add.s64 	%rd14, %rd13, %rd9;
	ld.global.f32 	%f11, [%rd14];
	mul.f32 	%f12, %f6, %f11;
	st.global.f32 	[%rd14], %f12;

LBB0_4:
	ret;

}

`
)
