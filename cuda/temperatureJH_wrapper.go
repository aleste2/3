package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for settemperatureJH kernel
var settemperatureJH_code cu.Function

// Stores the arguments for settemperatureJH kernel invocation
type settemperatureJH_args_t struct {
	arg_B             unsafe.Pointer
	arg_noise         unsafe.Pointer
	arg_kB2_VgammaDt  float32
	arg_Ms_           unsafe.Pointer
	arg_Ms_mul        float32
	arg_tempJH        unsafe.Pointer
	arg_alpha_        unsafe.Pointer
	arg_alpha_mul     float32
	arg_ScaleNoiseLLB float32
	arg_N             int
	argptr            [10]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for settemperatureJH kernel invocation
var settemperatureJH_args settemperatureJH_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	settemperatureJH_args.argptr[0] = unsafe.Pointer(&settemperatureJH_args.arg_B)
	settemperatureJH_args.argptr[1] = unsafe.Pointer(&settemperatureJH_args.arg_noise)
	settemperatureJH_args.argptr[2] = unsafe.Pointer(&settemperatureJH_args.arg_kB2_VgammaDt)
	settemperatureJH_args.argptr[3] = unsafe.Pointer(&settemperatureJH_args.arg_Ms_)
	settemperatureJH_args.argptr[4] = unsafe.Pointer(&settemperatureJH_args.arg_Ms_mul)
	settemperatureJH_args.argptr[5] = unsafe.Pointer(&settemperatureJH_args.arg_tempJH)
	settemperatureJH_args.argptr[6] = unsafe.Pointer(&settemperatureJH_args.arg_alpha_)
	settemperatureJH_args.argptr[7] = unsafe.Pointer(&settemperatureJH_args.arg_alpha_mul)
	settemperatureJH_args.argptr[8] = unsafe.Pointer(&settemperatureJH_args.arg_ScaleNoiseLLB)
	settemperatureJH_args.argptr[9] = unsafe.Pointer(&settemperatureJH_args.arg_N)
}

// Wrapper for settemperatureJH CUDA kernel, asynchronous.
func k_settemperatureJH_async(B unsafe.Pointer, noise unsafe.Pointer, kB2_VgammaDt float32, Ms_ unsafe.Pointer, Ms_mul float32, tempJH unsafe.Pointer, alpha_ unsafe.Pointer, alpha_mul float32, ScaleNoiseLLB float32, N int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("settemperatureJH")
	}

	settemperatureJH_args.Lock()
	defer settemperatureJH_args.Unlock()

	if settemperatureJH_code == 0 {
		settemperatureJH_code = fatbinLoad(settemperatureJH_map, "settemperatureJH")
	}

	settemperatureJH_args.arg_B = B
	settemperatureJH_args.arg_noise = noise
	settemperatureJH_args.arg_kB2_VgammaDt = kB2_VgammaDt
	settemperatureJH_args.arg_Ms_ = Ms_
	settemperatureJH_args.arg_Ms_mul = Ms_mul
	settemperatureJH_args.arg_tempJH = tempJH
	settemperatureJH_args.arg_alpha_ = alpha_
	settemperatureJH_args.arg_alpha_mul = alpha_mul
	settemperatureJH_args.arg_ScaleNoiseLLB = ScaleNoiseLLB
	settemperatureJH_args.arg_N = N

	args := settemperatureJH_args.argptr[:]
	cu.LaunchKernel(settemperatureJH_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("settemperatureJH")
	}
}

// maps compute capability on PTX code for settemperatureJH kernel.
var settemperatureJH_map = map[int]string{0: "",
	30: settemperatureJH_ptx_30}

// settemperatureJH PTX code for various compute capabilities.
const (
	settemperatureJH_ptx_30 = `
.version 6.5
.target sm_30
.address_size 64

	// .globl	settemperatureJH

.visible .entry settemperatureJH(
	.param .u64 settemperatureJH_param_0,
	.param .u64 settemperatureJH_param_1,
	.param .f32 settemperatureJH_param_2,
	.param .u64 settemperatureJH_param_3,
	.param .f32 settemperatureJH_param_4,
	.param .u64 settemperatureJH_param_5,
	.param .u64 settemperatureJH_param_6,
	.param .f32 settemperatureJH_param_7,
	.param .f32 settemperatureJH_param_8,
	.param .u32 settemperatureJH_param_9
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<25>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<20>;


	ld.param.u64 	%rd1, [settemperatureJH_param_0];
	ld.param.u64 	%rd2, [settemperatureJH_param_1];
	ld.param.f32 	%f8, [settemperatureJH_param_2];
	ld.param.u64 	%rd3, [settemperatureJH_param_3];
	ld.param.f32 	%f22, [settemperatureJH_param_4];
	ld.param.u64 	%rd4, [settemperatureJH_param_5];
	ld.param.u64 	%rd5, [settemperatureJH_param_6];
	ld.param.f32 	%f24, [settemperatureJH_param_7];
	ld.param.f32 	%f11, [settemperatureJH_param_8];
	ld.param.u32 	%r2, [settemperatureJH_param_9];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_8;

	setp.eq.s64	%p2, %rd3, 0;
	@%p2 bra 	BB0_3;

	cvta.to.global.u64 	%rd6, %rd3;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f12, [%rd8];
	mul.f32 	%f22, %f12, %f22;

BB0_3:
	setp.eq.f32	%p3, %f22, 0f00000000;
	mov.f32 	%f23, 0f00000000;
	@%p3 bra 	BB0_5;

	rcp.rn.f32 	%f23, %f22;

BB0_5:
	cvta.to.global.u64 	%rd9, %rd4;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.f32 	%f5, [%rd11];
	setp.eq.s64	%p4, %rd5, 0;
	@%p4 bra 	BB0_7;

	cvta.to.global.u64 	%rd12, %rd5;
	add.s64 	%rd14, %rd12, %rd10;
	ld.global.f32 	%f14, [%rd14];
	mul.f32 	%f24, %f14, %f24;

BB0_7:
	cvta.to.global.u64 	%rd15, %rd1;
	cvta.to.global.u64 	%rd16, %rd2;
	add.s64 	%rd18, %rd16, %rd10;
	ld.global.f32 	%f15, [%rd18];
	mul.f32 	%f16, %f15, %f11;
	mul.f32 	%f17, %f24, %f8;
	mul.f32 	%f18, %f5, %f17;
	mul.f32 	%f19, %f23, %f18;
	sqrt.rn.f32 	%f20, %f19;
	mul.f32 	%f21, %f16, %f20;
	add.s64 	%rd19, %rd15, %rd10;
	st.global.f32 	[%rd19], %f21;

BB0_8:
	ret;
}


`
)
