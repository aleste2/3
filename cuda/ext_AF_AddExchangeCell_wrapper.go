package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for addExchangeAFCell kernel
var addExchangeAFCell_code cu.Function

// Stores the arguments for addExchangeAFCell kernel invocation
type addExchangeAFCell_args_t struct {
	arg_dst1x     unsafe.Pointer
	arg_dst1y     unsafe.Pointer
	arg_dst1z     unsafe.Pointer
	arg_dst2x     unsafe.Pointer
	arg_dst2y     unsafe.Pointer
	arg_dst2z     unsafe.Pointer
	arg_m1x       unsafe.Pointer
	arg_m1y       unsafe.Pointer
	arg_m1z       unsafe.Pointer
	arg_m2x       unsafe.Pointer
	arg_m2y       unsafe.Pointer
	arg_m2z       unsafe.Pointer
	arg_Ms1_      unsafe.Pointer
	arg_Ms1_mul   float32
	arg_Ms2_      unsafe.Pointer
	arg_Ms2_mul   float32
	arg_Bex12_    unsafe.Pointer
	arg_Bex12_mul float32
	arg_Bex21_    unsafe.Pointer
	arg_Bex21_mul float32
	arg_N         int
	argptr        [21]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for addExchangeAFCell kernel invocation
var addExchangeAFCell_args addExchangeAFCell_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	addExchangeAFCell_args.argptr[0] = unsafe.Pointer(&addExchangeAFCell_args.arg_dst1x)
	addExchangeAFCell_args.argptr[1] = unsafe.Pointer(&addExchangeAFCell_args.arg_dst1y)
	addExchangeAFCell_args.argptr[2] = unsafe.Pointer(&addExchangeAFCell_args.arg_dst1z)
	addExchangeAFCell_args.argptr[3] = unsafe.Pointer(&addExchangeAFCell_args.arg_dst2x)
	addExchangeAFCell_args.argptr[4] = unsafe.Pointer(&addExchangeAFCell_args.arg_dst2y)
	addExchangeAFCell_args.argptr[5] = unsafe.Pointer(&addExchangeAFCell_args.arg_dst2z)
	addExchangeAFCell_args.argptr[6] = unsafe.Pointer(&addExchangeAFCell_args.arg_m1x)
	addExchangeAFCell_args.argptr[7] = unsafe.Pointer(&addExchangeAFCell_args.arg_m1y)
	addExchangeAFCell_args.argptr[8] = unsafe.Pointer(&addExchangeAFCell_args.arg_m1z)
	addExchangeAFCell_args.argptr[9] = unsafe.Pointer(&addExchangeAFCell_args.arg_m2x)
	addExchangeAFCell_args.argptr[10] = unsafe.Pointer(&addExchangeAFCell_args.arg_m2y)
	addExchangeAFCell_args.argptr[11] = unsafe.Pointer(&addExchangeAFCell_args.arg_m2z)
	addExchangeAFCell_args.argptr[12] = unsafe.Pointer(&addExchangeAFCell_args.arg_Ms1_)
	addExchangeAFCell_args.argptr[13] = unsafe.Pointer(&addExchangeAFCell_args.arg_Ms1_mul)
	addExchangeAFCell_args.argptr[14] = unsafe.Pointer(&addExchangeAFCell_args.arg_Ms2_)
	addExchangeAFCell_args.argptr[15] = unsafe.Pointer(&addExchangeAFCell_args.arg_Ms2_mul)
	addExchangeAFCell_args.argptr[16] = unsafe.Pointer(&addExchangeAFCell_args.arg_Bex12_)
	addExchangeAFCell_args.argptr[17] = unsafe.Pointer(&addExchangeAFCell_args.arg_Bex12_mul)
	addExchangeAFCell_args.argptr[18] = unsafe.Pointer(&addExchangeAFCell_args.arg_Bex21_)
	addExchangeAFCell_args.argptr[19] = unsafe.Pointer(&addExchangeAFCell_args.arg_Bex21_mul)
	addExchangeAFCell_args.argptr[20] = unsafe.Pointer(&addExchangeAFCell_args.arg_N)
}

// Wrapper for addExchangeAFCell CUDA kernel, asynchronous.
func k_addExchangeAFCell_async(dst1x unsafe.Pointer, dst1y unsafe.Pointer, dst1z unsafe.Pointer, dst2x unsafe.Pointer, dst2y unsafe.Pointer, dst2z unsafe.Pointer, m1x unsafe.Pointer, m1y unsafe.Pointer, m1z unsafe.Pointer, m2x unsafe.Pointer, m2y unsafe.Pointer, m2z unsafe.Pointer, Ms1_ unsafe.Pointer, Ms1_mul float32, Ms2_ unsafe.Pointer, Ms2_mul float32, Bex12_ unsafe.Pointer, Bex12_mul float32, Bex21_ unsafe.Pointer, Bex21_mul float32, N int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("addExchangeAFCell")
	}

	addExchangeAFCell_args.Lock()
	defer addExchangeAFCell_args.Unlock()

	if addExchangeAFCell_code == 0 {
		addExchangeAFCell_code = fatbinLoad(addExchangeAFCell_map, "addExchangeAFCell")
	}

	addExchangeAFCell_args.arg_dst1x = dst1x
	addExchangeAFCell_args.arg_dst1y = dst1y
	addExchangeAFCell_args.arg_dst1z = dst1z
	addExchangeAFCell_args.arg_dst2x = dst2x
	addExchangeAFCell_args.arg_dst2y = dst2y
	addExchangeAFCell_args.arg_dst2z = dst2z
	addExchangeAFCell_args.arg_m1x = m1x
	addExchangeAFCell_args.arg_m1y = m1y
	addExchangeAFCell_args.arg_m1z = m1z
	addExchangeAFCell_args.arg_m2x = m2x
	addExchangeAFCell_args.arg_m2y = m2y
	addExchangeAFCell_args.arg_m2z = m2z
	addExchangeAFCell_args.arg_Ms1_ = Ms1_
	addExchangeAFCell_args.arg_Ms1_mul = Ms1_mul
	addExchangeAFCell_args.arg_Ms2_ = Ms2_
	addExchangeAFCell_args.arg_Ms2_mul = Ms2_mul
	addExchangeAFCell_args.arg_Bex12_ = Bex12_
	addExchangeAFCell_args.arg_Bex12_mul = Bex12_mul
	addExchangeAFCell_args.arg_Bex21_ = Bex21_
	addExchangeAFCell_args.arg_Bex21_mul = Bex21_mul
	addExchangeAFCell_args.arg_N = N

	args := addExchangeAFCell_args.argptr[:]
	cu.LaunchKernel(addExchangeAFCell_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("addExchangeAFCell")
	}
}

// maps compute capability on PTX code for addExchangeAFCell kernel.
var addExchangeAFCell_map = map[int]string{0: "",
	70: addExchangeAFCell_ptx_70}

// addExchangeAFCell PTX code for various compute capabilities.
const (
	addExchangeAFCell_ptx_70 = `
.version 7.1
.target sm_70
.address_size 64

	// .globl	addExchangeAFCell

.visible .entry addExchangeAFCell(
	.param .u64 addExchangeAFCell_param_0,
	.param .u64 addExchangeAFCell_param_1,
	.param .u64 addExchangeAFCell_param_2,
	.param .u64 addExchangeAFCell_param_3,
	.param .u64 addExchangeAFCell_param_4,
	.param .u64 addExchangeAFCell_param_5,
	.param .u64 addExchangeAFCell_param_6,
	.param .u64 addExchangeAFCell_param_7,
	.param .u64 addExchangeAFCell_param_8,
	.param .u64 addExchangeAFCell_param_9,
	.param .u64 addExchangeAFCell_param_10,
	.param .u64 addExchangeAFCell_param_11,
	.param .u64 addExchangeAFCell_param_12,
	.param .f32 addExchangeAFCell_param_13,
	.param .u64 addExchangeAFCell_param_14,
	.param .f32 addExchangeAFCell_param_15,
	.param .u64 addExchangeAFCell_param_16,
	.param .f32 addExchangeAFCell_param_17,
	.param .u64 addExchangeAFCell_param_18,
	.param .f32 addExchangeAFCell_param_19,
	.param .u32 addExchangeAFCell_param_20
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<49>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<54>;


	ld.param.u64 	%rd1, [addExchangeAFCell_param_0];
	ld.param.u64 	%rd2, [addExchangeAFCell_param_1];
	ld.param.u64 	%rd3, [addExchangeAFCell_param_2];
	ld.param.u64 	%rd4, [addExchangeAFCell_param_3];
	ld.param.u64 	%rd5, [addExchangeAFCell_param_4];
	ld.param.u64 	%rd6, [addExchangeAFCell_param_5];
	ld.param.u64 	%rd7, [addExchangeAFCell_param_6];
	ld.param.u64 	%rd8, [addExchangeAFCell_param_7];
	ld.param.u64 	%rd9, [addExchangeAFCell_param_8];
	ld.param.u64 	%rd10, [addExchangeAFCell_param_9];
	ld.param.u64 	%rd11, [addExchangeAFCell_param_10];
	ld.param.u64 	%rd12, [addExchangeAFCell_param_11];
	ld.param.u64 	%rd13, [addExchangeAFCell_param_12];
	ld.param.f32 	%f43, [addExchangeAFCell_param_13];
	ld.param.u64 	%rd14, [addExchangeAFCell_param_14];
	ld.param.f32 	%f45, [addExchangeAFCell_param_15];
	ld.param.u64 	%rd15, [addExchangeAFCell_param_16];
	ld.param.f32 	%f47, [addExchangeAFCell_param_17];
	ld.param.u64 	%rd16, [addExchangeAFCell_param_18];
	ld.param.f32 	%f48, [addExchangeAFCell_param_19];
	ld.param.u32 	%r2, [addExchangeAFCell_param_20];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_14;

	setp.eq.s64	%p2, %rd13, 0;
	@%p2 bra 	BB0_3;

	cvta.to.global.u64 	%rd17, %rd13;
	mul.wide.s32 	%rd18, %r1, 4;
	add.s64 	%rd19, %rd17, %rd18;
	ld.global.nc.f32 	%f17, [%rd19];
	mul.f32 	%f43, %f17, %f43;

BB0_3:
	setp.eq.f32	%p3, %f43, 0f00000000;
	mov.f32 	%f44, 0f00000000;
	@%p3 bra 	BB0_5;

	rcp.rn.f32 	%f44, %f43;

BB0_5:
	setp.eq.s64	%p4, %rd14, 0;
	@%p4 bra 	BB0_7;

	cvta.to.global.u64 	%rd20, %rd14;
	mul.wide.s32 	%rd21, %r1, 4;
	add.s64 	%rd22, %rd20, %rd21;
	ld.global.nc.f32 	%f19, [%rd22];
	mul.f32 	%f45, %f19, %f45;

BB0_7:
	setp.eq.f32	%p5, %f45, 0f00000000;
	mov.f32 	%f46, 0f00000000;
	@%p5 bra 	BB0_9;

	rcp.rn.f32 	%f46, %f45;

BB0_9:
	setp.eq.s64	%p6, %rd15, 0;
	@%p6 bra 	BB0_11;

	cvta.to.global.u64 	%rd23, %rd15;
	mul.wide.s32 	%rd24, %r1, 4;
	add.s64 	%rd25, %rd23, %rd24;
	ld.global.nc.f32 	%f21, [%rd25];
	mul.f32 	%f47, %f21, %f47;

BB0_11:
	setp.eq.s64	%p7, %rd16, 0;
	@%p7 bra 	BB0_13;

	cvta.to.global.u64 	%rd26, %rd16;
	mul.wide.s32 	%rd27, %r1, 4;
	add.s64 	%rd28, %rd26, %rd27;
	ld.global.nc.f32 	%f22, [%rd28];
	mul.f32 	%f48, %f22, %f48;

BB0_13:
	cvta.to.global.u64 	%rd29, %rd10;
	mul.wide.s32 	%rd30, %r1, 4;
	add.s64 	%rd31, %rd29, %rd30;
	ld.global.nc.f32 	%f23, [%rd31];
	mul.f32 	%f24, %f44, %f47;
	cvta.to.global.u64 	%rd32, %rd1;
	add.s64 	%rd33, %rd32, %rd30;
	ld.global.f32 	%f25, [%rd33];
	fma.rn.f32 	%f26, %f24, %f23, %f25;
	st.global.f32 	[%rd33], %f26;
	cvta.to.global.u64 	%rd34, %rd11;
	add.s64 	%rd35, %rd34, %rd30;
	ld.global.nc.f32 	%f27, [%rd35];
	cvta.to.global.u64 	%rd36, %rd2;
	add.s64 	%rd37, %rd36, %rd30;
	ld.global.f32 	%f28, [%rd37];
	fma.rn.f32 	%f29, %f24, %f27, %f28;
	st.global.f32 	[%rd37], %f29;
	cvta.to.global.u64 	%rd38, %rd12;
	add.s64 	%rd39, %rd38, %rd30;
	ld.global.nc.f32 	%f30, [%rd39];
	cvta.to.global.u64 	%rd40, %rd3;
	add.s64 	%rd41, %rd40, %rd30;
	ld.global.f32 	%f31, [%rd41];
	fma.rn.f32 	%f32, %f24, %f30, %f31;
	st.global.f32 	[%rd41], %f32;
	cvta.to.global.u64 	%rd42, %rd7;
	add.s64 	%rd43, %rd42, %rd30;
	ld.global.nc.f32 	%f33, [%rd43];
	mul.f32 	%f34, %f46, %f48;
	cvta.to.global.u64 	%rd44, %rd4;
	add.s64 	%rd45, %rd44, %rd30;
	ld.global.f32 	%f35, [%rd45];
	fma.rn.f32 	%f36, %f34, %f33, %f35;
	st.global.f32 	[%rd45], %f36;
	cvta.to.global.u64 	%rd46, %rd8;
	add.s64 	%rd47, %rd46, %rd30;
	ld.global.nc.f32 	%f37, [%rd47];
	cvta.to.global.u64 	%rd48, %rd5;
	add.s64 	%rd49, %rd48, %rd30;
	ld.global.f32 	%f38, [%rd49];
	fma.rn.f32 	%f39, %f34, %f37, %f38;
	st.global.f32 	[%rd49], %f39;
	cvta.to.global.u64 	%rd50, %rd9;
	add.s64 	%rd51, %rd50, %rd30;
	ld.global.nc.f32 	%f40, [%rd51];
	cvta.to.global.u64 	%rd52, %rd6;
	add.s64 	%rd53, %rd52, %rd30;
	ld.global.f32 	%f41, [%rd53];
	fma.rn.f32 	%f42, %f34, %f40, %f41;
	st.global.f32 	[%rd53], %f42;

BB0_14:
	ret;
}


`
)
