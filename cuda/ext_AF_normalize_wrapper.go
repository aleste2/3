package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for normalizeAF kernel
var normalizeAF_code cu.Function

// Stores the arguments for normalizeAF kernel invocation
type normalizeAF_args_t struct {
	arg_m0x     unsafe.Pointer
	arg_m0y     unsafe.Pointer
	arg_m0z     unsafe.Pointer
	arg_m1x     unsafe.Pointer
	arg_m1y     unsafe.Pointer
	arg_m1z     unsafe.Pointer
	arg_m2x     unsafe.Pointer
	arg_m2y     unsafe.Pointer
	arg_m2z     unsafe.Pointer
	arg_Ms0_    unsafe.Pointer
	arg_Ms0_mul float32
	arg_Ms1_    unsafe.Pointer
	arg_Ms1_mul float32
	arg_Ms2_    unsafe.Pointer
	arg_Ms2_mul float32
	arg_N       int
	argptr      [16]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for normalizeAF kernel invocation
var normalizeAF_args normalizeAF_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	normalizeAF_args.argptr[0] = unsafe.Pointer(&normalizeAF_args.arg_m0x)
	normalizeAF_args.argptr[1] = unsafe.Pointer(&normalizeAF_args.arg_m0y)
	normalizeAF_args.argptr[2] = unsafe.Pointer(&normalizeAF_args.arg_m0z)
	normalizeAF_args.argptr[3] = unsafe.Pointer(&normalizeAF_args.arg_m1x)
	normalizeAF_args.argptr[4] = unsafe.Pointer(&normalizeAF_args.arg_m1y)
	normalizeAF_args.argptr[5] = unsafe.Pointer(&normalizeAF_args.arg_m1z)
	normalizeAF_args.argptr[6] = unsafe.Pointer(&normalizeAF_args.arg_m2x)
	normalizeAF_args.argptr[7] = unsafe.Pointer(&normalizeAF_args.arg_m2y)
	normalizeAF_args.argptr[8] = unsafe.Pointer(&normalizeAF_args.arg_m2z)
	normalizeAF_args.argptr[9] = unsafe.Pointer(&normalizeAF_args.arg_Ms0_)
	normalizeAF_args.argptr[10] = unsafe.Pointer(&normalizeAF_args.arg_Ms0_mul)
	normalizeAF_args.argptr[11] = unsafe.Pointer(&normalizeAF_args.arg_Ms1_)
	normalizeAF_args.argptr[12] = unsafe.Pointer(&normalizeAF_args.arg_Ms1_mul)
	normalizeAF_args.argptr[13] = unsafe.Pointer(&normalizeAF_args.arg_Ms2_)
	normalizeAF_args.argptr[14] = unsafe.Pointer(&normalizeAF_args.arg_Ms2_mul)
	normalizeAF_args.argptr[15] = unsafe.Pointer(&normalizeAF_args.arg_N)
}

// Wrapper for normalizeAF CUDA kernel, asynchronous.
func k_normalizeAF_async(m0x unsafe.Pointer, m0y unsafe.Pointer, m0z unsafe.Pointer, m1x unsafe.Pointer, m1y unsafe.Pointer, m1z unsafe.Pointer, m2x unsafe.Pointer, m2y unsafe.Pointer, m2z unsafe.Pointer, Ms0_ unsafe.Pointer, Ms0_mul float32, Ms1_ unsafe.Pointer, Ms1_mul float32, Ms2_ unsafe.Pointer, Ms2_mul float32, N int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("normalizeAF")
	}

	normalizeAF_args.Lock()
	defer normalizeAF_args.Unlock()

	if normalizeAF_code == 0 {
		normalizeAF_code = fatbinLoad(normalizeAF_map, "normalizeAF")
	}

	normalizeAF_args.arg_m0x = m0x
	normalizeAF_args.arg_m0y = m0y
	normalizeAF_args.arg_m0z = m0z
	normalizeAF_args.arg_m1x = m1x
	normalizeAF_args.arg_m1y = m1y
	normalizeAF_args.arg_m1z = m1z
	normalizeAF_args.arg_m2x = m2x
	normalizeAF_args.arg_m2y = m2y
	normalizeAF_args.arg_m2z = m2z
	normalizeAF_args.arg_Ms0_ = Ms0_
	normalizeAF_args.arg_Ms0_mul = Ms0_mul
	normalizeAF_args.arg_Ms1_ = Ms1_
	normalizeAF_args.arg_Ms1_mul = Ms1_mul
	normalizeAF_args.arg_Ms2_ = Ms2_
	normalizeAF_args.arg_Ms2_mul = Ms2_mul
	normalizeAF_args.arg_N = N

	args := normalizeAF_args.argptr[:]
	cu.LaunchKernel(normalizeAF_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("normalizeAF")
	}
}

// maps compute capability on PTX code for normalizeAF kernel.
var normalizeAF_map = map[int]string{0: "",
	70: normalizeAF_ptx_70}

// normalizeAF PTX code for various compute capabilities.
const (
	normalizeAF_ptx_70 = `
.version 7.2
.target sm_70
.address_size 64

	// .globl	normalizeAF

.visible .entry normalizeAF(
	.param .u64 normalizeAF_param_0,
	.param .u64 normalizeAF_param_1,
	.param .u64 normalizeAF_param_2,
	.param .u64 normalizeAF_param_3,
	.param .u64 normalizeAF_param_4,
	.param .u64 normalizeAF_param_5,
	.param .u64 normalizeAF_param_6,
	.param .u64 normalizeAF_param_7,
	.param .u64 normalizeAF_param_8,
	.param .u64 normalizeAF_param_9,
	.param .f32 normalizeAF_param_10,
	.param .u64 normalizeAF_param_11,
	.param .f32 normalizeAF_param_12,
	.param .u64 normalizeAF_param_13,
	.param .f32 normalizeAF_param_14,
	.param .u32 normalizeAF_param_15
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<35>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<41>;


	ld.param.u64 	%rd1, [normalizeAF_param_0];
	ld.param.u64 	%rd2, [normalizeAF_param_1];
	ld.param.u64 	%rd3, [normalizeAF_param_2];
	ld.param.u64 	%rd4, [normalizeAF_param_3];
	ld.param.u64 	%rd5, [normalizeAF_param_4];
	ld.param.u64 	%rd6, [normalizeAF_param_5];
	ld.param.u64 	%rd7, [normalizeAF_param_6];
	ld.param.u64 	%rd8, [normalizeAF_param_7];
	ld.param.u64 	%rd9, [normalizeAF_param_8];
	ld.param.u64 	%rd10, [normalizeAF_param_9];
	ld.param.f32 	%f33, [normalizeAF_param_10];
	ld.param.u64 	%rd11, [normalizeAF_param_11];
	ld.param.f32 	%f31, [normalizeAF_param_12];
	ld.param.u64 	%rd12, [normalizeAF_param_13];
	ld.param.f32 	%f32, [normalizeAF_param_14];
	ld.param.u32 	%r2, [normalizeAF_param_15];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	LBB0_10;

	setp.eq.s64 	%p2, %rd11, 0;
	@%p2 bra 	LBB0_3;

	cvta.to.global.u64 	%rd13, %rd11;
	mul.wide.s32 	%rd14, %r1, 4;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.nc.f32 	%f12, [%rd15];
	mul.f32 	%f31, %f12, %f31;

LBB0_3:
	setp.eq.s64 	%p3, %rd12, 0;
	@%p3 bra 	LBB0_5;

	cvta.to.global.u64 	%rd16, %rd12;
	mul.wide.s32 	%rd17, %r1, 4;
	add.s64 	%rd18, %rd16, %rd17;
	ld.global.nc.f32 	%f13, [%rd18];
	mul.f32 	%f32, %f13, %f32;

LBB0_5:
	setp.eq.s64 	%p4, %rd10, 0;
	@%p4 bra 	LBB0_7;

	cvta.to.global.u64 	%rd19, %rd10;
	mul.wide.s32 	%rd20, %r1, 4;
	add.s64 	%rd21, %rd19, %rd20;
	ld.global.nc.f32 	%f14, [%rd21];
	mul.f32 	%f33, %f14, %f33;

LBB0_7:
	setp.eq.f32 	%p5, %f33, 0f00000000;
	mov.f32 	%f34, 0f00000000;
	@%p5 bra 	LBB0_9;

	rcp.rn.f32 	%f34, %f33;

LBB0_9:
	cvta.to.global.u64 	%rd22, %rd4;
	mul.wide.s32 	%rd23, %r1, 4;
	add.s64 	%rd24, %rd22, %rd23;
	ld.global.nc.f32 	%f16, [%rd24];
	cvta.to.global.u64 	%rd25, %rd7;
	add.s64 	%rd26, %rd25, %rd23;
	ld.global.nc.f32 	%f17, [%rd26];
	mul.f32 	%f18, %f32, %f17;
	fma.rn.f32 	%f19, %f31, %f16, %f18;
	mul.f32 	%f20, %f34, %f19;
	cvta.to.global.u64 	%rd27, %rd1;
	add.s64 	%rd28, %rd27, %rd23;
	st.global.f32 	[%rd28], %f20;
	cvta.to.global.u64 	%rd29, %rd5;
	add.s64 	%rd30, %rd29, %rd23;
	ld.global.nc.f32 	%f21, [%rd30];
	cvta.to.global.u64 	%rd31, %rd8;
	add.s64 	%rd32, %rd31, %rd23;
	ld.global.nc.f32 	%f22, [%rd32];
	mul.f32 	%f23, %f32, %f22;
	fma.rn.f32 	%f24, %f31, %f21, %f23;
	mul.f32 	%f25, %f34, %f24;
	cvta.to.global.u64 	%rd33, %rd2;
	add.s64 	%rd34, %rd33, %rd23;
	st.global.f32 	[%rd34], %f25;
	cvta.to.global.u64 	%rd35, %rd6;
	add.s64 	%rd36, %rd35, %rd23;
	ld.global.nc.f32 	%f26, [%rd36];
	cvta.to.global.u64 	%rd37, %rd9;
	add.s64 	%rd38, %rd37, %rd23;
	ld.global.nc.f32 	%f27, [%rd38];
	mul.f32 	%f28, %f32, %f27;
	fma.rn.f32 	%f29, %f31, %f26, %f28;
	mul.f32 	%f30, %f34, %f29;
	cvta.to.global.u64 	%rd39, %rd3;
	add.s64 	%rd40, %rd39, %rd23;
	st.global.f32 	[%rd40], %f30;

LBB0_10:
	ret;

}

`
)
